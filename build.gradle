buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {url='https://dist.creeper.host/Sponge/maven'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.16.4-1.2.4'
group = 'someassemblyrequired'
archivesBaseName = 'someassemblyrequired'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    runs {
        client {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".mixins.json"

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            mods {
                someassemblyrequired {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".mixins.json"

            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'

            mods {
                someassemblyrequired {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.4'
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.0.62:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:7.6.0.62")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "someassemblyrequired",
            "Specification-Vendor": "someassemblyrequired",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"someassemblyrequired",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "someassemblyrequired.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "someassemblyrequired.refmap.json"
}